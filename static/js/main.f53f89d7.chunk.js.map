{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Aval","props","state","Entry","ChangeInput","event","setState","target","value","fetchUsers","n","fetch","then","response","json","data","user","Create","keyCode","name","family","DB","this","onChange","onKeyDown","type","className","placeholder","BD","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMA8DeA,E,YA3Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,MAAQ,CACNC,MAAO,IARU,EAWnBC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CACZH,MAAOE,EAAME,OAAOC,SAbL,EAiBnBC,WAAa,WAAU,IAATC,EAAQ,uDAAN,EACdC,MAAM,qCAAD,OAAsCD,IACxCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKT,SAAS,CACZU,KAAMD,QAtBK,EA0BnBE,OAAS,SAAAZ,GACe,IAAjBA,EAAMa,QAAsC,IAApB,EAAKhB,MAAMC,QACtC,EAAKM,WAAW,EAAKP,MAAMC,OAC3B,EAAKG,SAAS,CACZH,MAAO,OA5BX,EAAKD,MAAQ,CACXc,KAAM,CAAEG,KAAM,GAAIC,OAAQ,GAAIC,GAAI,KAHnB,E,sEAyCjB,OACE,6BACE,2BACEb,MAAOc,KAAKpB,MAAMC,MAClBoB,SAAUD,KAAKlB,YACfoB,UAAWF,KAAKL,OAChBQ,KAAK,OACLC,UAAU,WACVC,YAAY,QAEd,4BAAKL,KAAKpB,MAAMc,KAAKG,MACrB,4BAAKG,KAAKpB,MAAMc,KAAKI,QACrB,4BAAKE,KAAKpB,MAAMc,KAAKY,S,GAtDVC,aCUCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f53f89d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Aval extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: { name: \"\", family: \"\", DB: \"\" }\n    };\n  }\n\n  state = {\n    Entry: \"\"\n  };\n\n  ChangeInput = event => {\n    this.setState({\n      Entry: event.target.value\n    });\n  };\n\n  fetchUsers = (n=1) => {\n    fetch(`http://edalatkhane.org/api.php?id=${n}`)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          user: data\n        })\n      );\n  };\n  Create = event => {\n    if ((event.keyCode == 13) & (this.state.Entry != \"\")) {\n      this.fetchUsers(this.state.Entry)\n      this.setState({\n        Entry: \"\"\n      });\n    } else {\n      return;\n    }\n  };\n  // componentDidMount() {\n  //   this.fetchUsers();\n  // }\n\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.Entry}\n          onChange={this.ChangeInput}\n          onKeyDown={this.Create}\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"id?\"\n        />\n        <h1>{this.state.user.name}</h1>\n        <h1>{this.state.user.family}</h1>\n        <h1>{this.state.user.BD}</h1>\n      </div>\n    );\n  }\n}\n\nexport default Aval;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}